#!/bin/bash

# Grab full name of workspace container
WORKSPACE_CONTAINER=$(docker ps | grep workspace | awk '{print $1}')
WORKSPACE_NAME=$(docker ps | grep workspace | awk '{print $2}')

# Grab OS type
if [[ "$(uname)" == "Darwin" ]]; then
    OS_TYPE="OSX"
else
    OS_TYPE=$(expr substr $(uname -s) 1 5)
fi

usage() {
    echo "Commands for Magento environment of ${WORKSPACE_NAME} container."
    echo "Usage:"
    echo "  ./magento create DIR VERSION [-e: EE version]   Create new Magento project"
    echo "  ./magento dev DIR                               Settings for developer mode"
    echo "  ./magento deploy DIR                            Deploy after update source code"
    echo "  ./magento install DIR BASE_URL DB_NAME          Install new Magento project"
    exit 0
}

if [[ "$1" = "" || "$2" = "" ]]; then
    usage
fi

BASE_DIR=$(dirname "$0")
cd "$BASE_DIR"

if [ ! -d "../magento/$2" ]; then
    mkdir -p "../magento/$2"
fi

DIR=$2
URL=$3
DB_NAME=$4

magento_create() {
    if [[ $URL == "" ]]; then
        VERSION=""
    else
        VERSION="=$URL"
    fi

    if [[ $DB_NAME == "-e" ]]; then
        CMD="pwd && composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition$VERSION $DIR"
    else
        CMD="pwd && composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition$VERSION $DIR"
    fi

    if [[ $OS_TYPE == "MINGW" ]]; then
        winpty docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"

    else
        docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"
    fi
}

magento_dev() {
    CMD="pwd && cd $DIR && pwd \\
        && VERSION=\$(./bin/magento --version | awk -F[I-] '{print \$2}' | xargs) \\
        && echo 'deploy:mode:set developer' \\
        && php -dxdebug.mode=off bin/magento deploy:mode:set developer \\
        && echo 'Config redis default cache' \\
        && php -dxdebug.mode=off bin/magento setup:config:set --cache-backend=redis --cache-backend-redis-server=redis \\
        && echo 'Config redis page cache' \\
        && php -dxdebug.mode=off bin/magento setup:config:set --page-cache=redis --page-cache-redis-server=redis \\
        && echo 'Config redis session' \\
        && php -dxdebug.mode=off bin/magento setup:config:set --session-save=redis --session-save-redis-host=redis \\
        && echo 'Disable TwoFactorAuth' \\
        && if [ '\${VERSION}' = '2.4.6' ]; then \\
            php -dxdebug.mode=off bin/magento module:disable --clear-static-content Magento_TwoFactorAuth; \\
        else \\
            php -dxdebug.mode=off bin/magento module:disable --clear-static-content Magento_AdminAdobeImsTwoFactorAuth Magento_TwoFactorAuth; \\
        fi \\
        && echo 'Enable admin account sharing' \\
        && php -dxdebug.mode=off bin/magento config:set admin/security/admin_account_sharing 1\\
        && echo 'admin/security/use_form_key 0' \\
        && php -dxdebug.mode=off bin/magento config:set admin/security/use_form_key 0\\
        && echo 'admin/security/session_lifetime 31536000' \\
        && php -dxdebug.mode=off bin/magento config:set admin/security/session_lifetime 31536000\\
        && echo 'admin/security/password_is_forced 0' \\
        && php -dxdebug.mode=off bin/magento config:set admin/security/password_is_forced 0\\
        && echo 'admin/security/password_lifetime forever' \\
        && php -dxdebug.mode=off bin/magento config:set admin/security/password_lifetime ''"


    if [[ $OS_TYPE == "MINGW" ]]; then
        winpty docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"

    else
        docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"
    fi
}

magento_deploy() {
    CMD="cd $DIR && pwd && MODE=\$(./bin/magento deploy:mode:show | awk -F[:.] '{print \$2}' | xargs) && \\
        echo \"Mode: \$MODE\" && \\
        php -dxdebug.mode=off ./bin/magento setup:upgrade && \\
        if [ '\${MODE}' = 'production' ]; then \\
            php -dxdebug.mode=off ./bin/magento setup:di:compile && \\
            php -dxdebug.mode=off ./bin/magento setup:static-content:deploy --content-version=\`date '+%m%d%H%M%S'\`; \\
        fi && \\
        php -dxdebug.mode=off ./bin/magento cache:flush"

    if [[ $OS_TYPE == "MINGW" ]]; then
        winpty docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"
    else
        docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"
    fi
}

magento_install() {
    if [[ $URL == "" || $DB_NAME == "" ]]; then
        echo "Synctax error: magento DIR install BASE_URL DB_NAME"

        return
    fi

    echo "URL: $URL"
    echo "DB_NAME: $DB_NAME"

    EXECUTE_PHP="\$dbh = new PDO(\"mysql:host=mysql\", \"root\", \"root\");\
    \$dbh->exec(\"CREATE DATABASE IF NOT EXISTS \`$DB_NAME\` DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci\");"
    CMD="pwd && cd $DIR && pwd \\
        && php -dxdebug.mode=off -r '$EXECUTE_PHP' \\
        && bin/magento setup:install \\
        --base-url=$URL \\
        --db-host=mysql \\
        --db-name=$DB_NAME \\
        --db-user=root \\
        --db-password=root \\
        --backend-frontname=admin \\
        --admin-use-security-key=0 \\
        --admin-firstname=admin \\
        --admin-lastname=admin \\
        --admin-email=admin@admin.com \\
        --admin-user=admin \\
        --admin-password=Admin@123 \\
        --language=en_US \\
        --currency=USD \\
        --timezone=America/Chicago \\
        --use-rewrites=1 \\
        --search-engine=elasticsearch7 \\
        --elasticsearch-host=elasticsearch \\
        --elasticsearch-port=9200"

    if [[ $OS_TYPE == "MINGW" ]]; then
        winpty docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"

    else
        docker exec --user=laradock -it $WORKSPACE_CONTAINER bash -c "${CMD}"
    fi
}

case $1 in
create | CREATE)
    magento_create
    ;;
deploy | DEPLOY)
    magento_deploy
    ;;
dev | DEV)
    magento_dev
    ;;
install | INSTALL)
    magento_install
    ;;
*)
    usage
    ;;

esac

exit 0
